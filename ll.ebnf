program = { expression | definition } ;

definition = "fn", id, "(", [ id, { ",", id } ], ")", expression ;

expression = binary_expression | prefix_expression | primary_expression ;

binary_expression = expression, ( "&" | "|" ), expression ;

prefix_expression = "~", expression ;

primary_expression = id | boolean_literal | function_application ;

function_application = id, "(", [ expression, { ",", expression } ], ")" ;

boolean_literal = "true" | "false" ;

id = (alpha | "_"), { alpha | digit | "_" | "-" } ;

alpha = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

comment = "#", { any_character_except_newline } ;

whitespace = " " | "\t" | "\n" | "\r" ;
